#-- 1 PROVIDER => N TRADE
#-- 1 TRADE => 1 CURRENCY
#-- 1 TRADE => 1 TRADE_EX
#-- 1 TRADE => N MOVEMENT
#--	1 META_PROVIDER = 1 PROVIDER LIEE A N PROVIDER

#--Le fournisseur de signal
@Name=provider.init.create_table_trade
CREATE TABLE PROVIDER
(
	ID 					INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	NAME 				VARCHAR(100) NOT NULL,
	START_DATE			DATE NOT NULL,
	END_DATE			DATE NOT NULL,
	LAST_UPDATE			DATE NOT NULL,
	LINK_ID				INT,
	PROVIDER_TYPE		VARCHAR(3) NOT NULL,
	BROKER_ID			INT,
	CONSTRAINT			PROVIDER_NAME_UNIQUE UNIQUE(NAME)
)

#--Le broker
@Name=provider.init.create_table_broker
CREATE TABLE BROKER
(
	ID 					INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	NAME				VARCHAR(100) NOT NULL,
	CONSTRAINT			BROKER_NAME_UNIQUE UNIQUE(NAME)
)

#--Lien entre un provider fournisseur de signal et un meta provider, qui contient plusieurs providers
@Name=provider.init.create_table_meta_provider_link
CREATE TABLE META_PROVIDER_LINK
(
	ID 					INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	META_ID				INT NOT NULL,
	NATURAL_ID			INT NOT NULL,
	CONSTRAINT			META_PROVIDER_PAIR_UNIQUE UNIQUE(META_ID, NATURAL_ID)
)

#--La devise, EX: EUR/USD
@Name=provider.init.create_table_currency
CREATE TABLE CURRENCY
(
	ID 					INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	PAIR_ONE			VARCHAR(3) NOT NULL,
	PAIR_TWO			VARCHAR(3) NOT NULL,
	CONSTRAINT			CURRENCY_PAIR_UNIQUE UNIQUE(PAIR_ONE, PAIR_TWO)
)

#--Un trade executé par un provider
@Name=provider.init.create_table_trade
CREATE TABLE TRADE
(
	ID 					INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	START_DATE			DATE NOT NULL,
	END_DATE			DATE NOT NULL,
	BEST_PIPS			FLOAT NOT NULL,
	WORST_PIPS			FLOAT NOT NULL,
	NET_PIPS			FLOAT NOT NULL,
	BEST_DOLLAR_LOT		FLOAT NOT NULL,
	WORST_DOLLAR_LOT	FLOAT NOT NULL,
	NET_DOLLAR_LOT		FLOAT NOT NULL,
	CURRENCY_ID			INT NOT NULL,
	PROVIDER_ID			INT NOT NULL,
	CONSTRAINT		PROVIDER_START_DATE_UNIQUE UNIQUE(START_DATE),
	CONSTRAINT		PROVIDER_END_DATE_UNIQUE UNIQUE(END_DATE),
)

#--Informations complémentaires et lourdes pour chaque trade
@Name=provider.init.create_table_trade_ext
CREATE TABLE TRADE_EXT
(
	TRADE_ID			INT PRIMARY KEY, 
	TICKET				VARCHAR(100)
)

#--Décomposition de chaque trade en mouvement: ouverture, fermeture, mise à jour
#--1 mouvement à lieu à un instant T = MOVEMENT_DATE, à ce moment le trade est à une valeur
#-- égale à VALUE_PIPS et VALUE_DOLLAR_LOT en fonction de l'unité que l'on souhaite utiliser
@Name=provider.init.create_table_trade_movement
CREATE TABLE TRADE_MOVEMENT
(
	ID 					INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	TRADE_ID			INT NOT NULL,
	MOVEMENT_TYPE_ID	INT NOT NULL,
	MOVEMENT_DATE		DATE NOT NULL,
	VALUE_PIPS			FLOAT,
	VALUE_DOLLAR_LOT	FLOAT,
	CONSTRAINT UNIQUE_MOVEMENT_DATE UNIQUE(MOVEMENT_DATE)
)

#-- Movement type = OPEN, CLOSE, UPDATE, VOID, NOVOID
#-- VOID = à un instant T, aucun trade n'est en cours pour le provider
#-- NOVOID = fin de la period ou aucun trade n'est en cours
@Name=provider.init.create_table_movement_type
CREATE TABLE MOVEMENT_TYPE
(
	ID					INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY,
	LABEL				VARCHAR(30),
	CONSTRAINT UNIQUE_MOVEMENT_TYPE_LABEL UNIQUE(LABEL)
)



























